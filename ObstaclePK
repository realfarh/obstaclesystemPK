/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body (Simulated)
  ******************************************************************************
  */
/* USER CODE END Header */

#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>
#include <time.h>

/* Thresholds untuk simulasi */
#define JARAK_THRESHOLD_CM 40.0f
#define LDR_THRESHOLD_ADC  3500

/* Variabel global simulasi */
float simulated_distance = 40.0f; // Nilai jarak awal simulasi (cm)
int simulated_ldr = 3500;         // Nilai ADC awal simulasi

/* Deklarasi fungsi simulasi */
bool is_buzzer_on(float jarak_cm, int ldr_adc) {
    return (jarak_cm < JARAK_THRESHOLD_CM && ldr_adc < LDR_THRESHOLD_ADC);
}

bool is_led_on(int ldr_adc) {
    return (ldr_adc < LDR_THRESHOLD_ADC);
}

/* Variabel global untuk status aktuator */
// Deklarasi variabel global untuk simulasi
int simulated_buzzer = 0; // Status awal OFF
int simulated_led = 0;    // Status awal OFF

/* Gunakan tipe int untuk debugging */



void simulate_sensors() {
    simulated_distance = (rand() % 100) / 1.0f; // Rentang 0.0 - 99.9 cm
    simulated_ldr = rand() % 4096;              // Rentang ADC 0 - 4095

    // Perbarui status aktuator
    simulated_buzzer = is_buzzer_on(simulated_distance, simulated_ldr) ? 1 : 0;
		simulated_led = is_led_on(simulated_ldr) ? 1 : 0;

}

void run_simulation() {
    simulate_sensors();

    // Update status aktuator
    simulated_buzzer = is_buzzer_on(simulated_distance, simulated_ldr) ? 1 : 0;
    simulated_led = is_led_on(simulated_ldr) ? 1 : 0;

    // Output status
    printf("\nSimulasi:");
    printf("\nJarak (cm): %.2f", simulated_distance);
    printf("\nLDR (ADC): %d", simulated_ldr);
    printf("\nBuzzer: %d", simulated_buzzer); // Akan tampil 0 atau 1
    printf("\nLED: %d", simulated_led);       // Akan tampil 0 atau 1
}

int main(void) {
    srand(time(NULL));
    printf("Sistem siap dalam mode simulasi.\n");

    while (1) {
        char input;
        printf("\nMasukkan 't' untuk testing mode, 's' untuk simulasi sensor, 'q' untuk keluar: ");
        scanf(" %c", &input);

        if (input == 't') {
            float jarak;
            int ldr;

            printf("\nMasukkan nilai jarak (cm) (-1 untuk keluar): ");
            scanf("%f", &jarak);

            if (jarak == -1) continue;

            printf("Masukkan nilai LDR (ADC): ");
            scanf("%d", &ldr);

        } else if (input == 's') {
            simulate_sensors();
            printf("\n[Simulasi Sensor]");
            printf("\nJarak (cm): %.2f", simulated_distance);
            printf("\nLDR (ADC): %d", simulated_ldr);

        } else if (input == 'q') {
            printf("\nKeluar dari simulasi.\n");
            break;
        } else {
            printf("\nInput tidak dikenal. Coba lagi.\n");
        }
    }

    return 0;
}
